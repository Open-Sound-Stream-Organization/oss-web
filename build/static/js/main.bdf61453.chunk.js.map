{"version":3,"sources":["components/Login.tsx","config.ts","api/Api.tsx","test.mp3","img/example-cover.jpg","components/Message.tsx","api/Audio.tsx","api/Hooks.tsx","components/Cell.tsx","components/Dialog.tsx","components/Shared.tsx","components/ActiveSong.tsx","components/Upload.tsx","components/SongList.tsx","components/Albums.tsx","components/Artists.tsx","components/NavBar.tsx","components/Settings.tsx","components/Player.tsx","components/Playlists.tsx","components/PlaylistsBar.tsx","api/Seeder.ts","components/Seeder.tsx","components/Songs.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Login","useState","username","setUsername","password","setPassword","error","setError","className","onSubmit","e","string","preventDefault","API","login","Buffer","toString","catch","message","htmlFor","id","type","placeholder","onChange","target","value","required","to","API_URL","observers","Set","observer","url","params","callback","this","fetch","then","r","undefined","forEach","o","call","add","delete","endpoint","query","querystring","encode","method","key","localStorage","getItem","JSON","parse","getApiKey","console","log","apiKey","Error","headers","response","status","statusText","arrayBuffer","buffer","blob","Blob","URL","createObjectURL","file","startsWith","body","FormData","append","toUpperCase","args","update","stringify","json","removeItem","window","location","reload","base64","navigator","platform","vendor","date","format","Date","purpose","setItem","module","exports","Message","text","close","icon","faBomb","faInfoCircle","faCheck","faExclamationTriangle","onClick","MessageContext","React","createContext","useMessages","useContext","messages","setMessages","useEffect","i","setInterval","length","now","getTime","m","filter","clearTimeout","old","slice","clear","index","n","splice","Provider","Messages","TransitionGroup","map","CSSTransition","timeout","Context","usePlayer","context","useCreateAudio","song","setSong","shuffle","setShuffle","repeat","setRepeat","position","setPosition","unshuffled","setSongs","shuffled","useMemo","sort","Math","random","songs","setIndex","audio","a","Audio","crossOrigin","queue","s","title","remove","useQueue","currentTime","addEventListener","removeEventListener","play","ss","Array","isArray","s1","indexOf","Api","src","next","duration","pause","previous","playing","paused","SongButton","selected","disabled","classes","faPause","faPlay","useApi","result","setResult","loading","setLoading","setMessage","subscribe","useApiBunch","endpoints","results","setResults","Promise","all","useApiList","models","objects","b","useLoadingList","render","Loading","faSpinner","useLoading","Cell","props","children","area","style","other","gridArea","DialogContext","useDialog","open","Dialog","ref","useRef","listener","keyCode","ICONS","faHeadphones","faMusic","faGuitar","faDrum","faRecordVinyl","faCompactDisc","Cover","alt","rest","hasImage","setImage","floor","onLoad","onError","draggable","ModelView","create","useParams","ModelSidebar","Single","match","name","active","faPlus","ActiveCover","album","cover_url","ActiveSong","Upload","memo","files","setFiles","uploading","setUploading","u","role","faUpload","multiple","accept","hidden","f","Uploading","done","setDone","substring","lastIndexOf","upload","ModelSelect","state","highlight","initial","sorted","set","v","v2","resource_uri","MultiModelSelect","model","action","LoadedSongEditor","setTitle","setAlbum","artists","setArtists","every","includes","data","put","useSelection","multi","setSelected","saved","setSaved","last","setLast","ids","ctrlKey","isSelected","events","is","onMouseDown","shiftKey","push","onMouseUp","shift","lower","min","upper","max","onMouseMove","buttons","SongAdder","playlists","post","playlist","Songs","selection","actions","display","SongRow","faEdit","faList","IconButton","LoadingSongRow","Artist","Album","Active","songURLs","SongList","Albums","Artists","albums","release","t","rowSpan","Nav","path","useLocation","pathname","links","href","faUser","faDoorOpen","DEFAULT_SETTINGS","theme","SettingsContext","Settings","setSettings","themes","faMoon","faSun","faFire","Queue","sources","source","Fragment","timestamp","time","minutes","seconds","toFixed","padStart","SongInfo","width","Volume","volume","saveVolumed","saveVolume","setVolume","clamped","toggleVolume","useVolume","faVolumeMute","faVolumeDown","faVolumeUp","adjust","w","currentTarget","offsetWidth","l","getBoundingClientRect","left","x","clientX","Player","faStepBackward","faStepForward","faRandom","faRedoAlt","faCog","songsinplaylist","contained","newSongs","faTrash","Create","setName","Playlists","p","Playlist","songNames","artistNames","range","array","SEEDER","count","artistIds","fill","_","millis","res","setTimeout","generator","tracker","setProgress","setTotal","require","seedModels","uploadFile","wait","ignore","Endpoint","Seeder","progress","total","Object","keys","toLowerCase","seed","SinglePage","Logout","logout","Page","page","document","charAt","component","App","loggedIn","setLoggedIn","isLoggedIn","dialog","defaultSettings","settings","useSettings","pages","PlaylistsBar","exact","Boolean","hostname","ReactDOM","StrictMode","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bdf61453.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport API from '../api/Api';\nimport { Link } from 'react-router-dom';\n\n\nfunction base64(string: string) {\n    return new Buffer(string).toString('base64');\n}\n\nconst Login = () => {\n\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState<string | null>(null);\n\n    return (\n        <div className='user-login'>\n            <form onSubmit={e => {\n                e.preventDefault()\n                API.login(base64(`${username}:${password}`))\n                    .catch(e => setError(e.message))\n            }}>\n\n                <h1>Login</h1>\n\n                {error && <p className='error'>{error}</p>}\n\n                <div>\n                    <label htmlFor='username'>Username</label>\n                    <input\n                        id='username'\n                        type='text'\n                        placeholder='Username'\n                        onChange={e => setUsername(e.target.value)}\n                        value={username}\n                        required\n                    />\n                </div>\n\n                <div>\n                    <label htmlFor='password'>Password</label>\n                    <input\n                        id='password'\n                        type='password'\n                        placeholder='Password'\n                        onChange={e => setPassword(e.target.value)}\n                        value={password}\n                        required\n                    />\n                </div>\n\n                <button type='submit'>Login</button>\n\n                <Link to={`/registration`} >Register</Link>\n\n            </form>\n\n        </div>\n\n\n    );\n}\nexport default Login;\n\n","export const DEV = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';\n\n//const BASE_URL = DEV ? 'https://de0.win' : '';\nconst BASE_URL = '';\nexport const API_URL = `${BASE_URL}/api/v1`;","import querystring, { ParsedUrlQueryInput } from 'querystring';\nimport { API_URL } from '../config';\nimport format from 'dateformat';\nimport { IApiKey } from './Models'\n\n/**\n * Replaced once we know the format the data will be sent by the server\n */\ntype Response<O> = O;\n\n\ninterface IObserver<O> {\n    url: string;\n    params?: ParsedUrlQueryInput | string;\n    callback: (result?: O, error?: Error) => unknown;\n}\n\nexport interface IApi {\n\n    subscribe<O>(url: string, params?: ParsedUrlQueryInput | string): ({\n        then: (callback: (result?: O | undefined, error?: Error | undefined) => unknown) => () => void;\n    });\n\n    post<O>(url: string, args: any): Promise<O>;\n\n    delete<O>(url: string, args: any): Promise<O>;\n\n    put<O>(url: string, args: any): Promise<O>;\n\n}\n\ntype Method = 'post' | 'delete' | 'put' | 'get';\nclass Api implements IApi {\n\n    private observers: Set<IObserver<any>> = new Set();\n\n    call<O>(observer: IObserver<O>) {\n        const { url, params, callback } = observer;\n        this.fetch<O>(url, params)\n            .then(r => callback(r))\n            .catch(e => callback(undefined, e));\n    }\n\n    update() {\n        this.observers.forEach(o => this.call(o));\n    }\n\n    subscribe<O>(url: string, params?: ParsedUrlQueryInput | string) {\n        return {\n            then: (callback: (result?: O, error?: Error) => unknown) => {\n                const o = { url, params, callback };\n                this.observers.add(o);\n                this.call(o);\n                return () => {\n                    this.observers.delete(o);\n                }\n            }\n        }\n    }\n\n    async fetch<O>(endpoint: string, params?: ParsedUrlQueryInput | string) {\n        const query = typeof params === 'string' ? params : querystring.encode(params ?? {});\n        return this.method<O>('get', `${endpoint}/?${query}`);\n    }\n\n    private getApiKey(): IApiKey | null {\n        const key = localStorage.getItem('apikey');\n        if (key) return JSON.parse(key);\n        return null;\n    }\n\n    public async isLoggedIn() {\n        if (!this.getApiKey()) return false;\n\n        return this.fetch('artist')\n            .then(() => true)\n            .catch(e => {\n                console.log(e);\n                //localStorage.removeItem('apikey');\n                return false;\n            });\n    }\n\n    public async audio(url: string) {\n        const apiKey = this.getApiKey();\n        if (!apiKey) throw new Error('Not logged in');\n\n        //const response = await fetch(require('../test.mp3'), {\n        const response = await fetch(`/${url}`, {\n            headers: {\n                'Authorization': apiKey.key,\n            }\n        });\n\n        if (response.status !== 200) throw new Error(response.statusText);\n\n        const buffer = await response.arrayBuffer();\n\n        /*\n        const audio = new AudioContext();\n        const src = audio.createBufferSource();\n        src.start(audio.currentTime);\n\n        src.buffer = await audio.decodeAudioData(buffer);\n        src.connect(audio.destination);\n\n        const content = await response.body?.getReader().read();\n        if (!content?.value) throw new Error('No audio found');\n        */\n\n        const blob = new Blob([buffer], { type: 'audio/*' })\n        return URL.createObjectURL(blob);\n\n    }\n\n    async upload(endpoint: string, file: File, method: Method = 'post') {\n        const apiKey = this.getApiKey();\n        if (!apiKey) throw new Error('Not logged in');\n\n        let url = endpoint;\n        if (!url.startsWith(API_URL)) url = `${API_URL}/${url}`\n        url += '/';\n\n        const body = new FormData()\n        body.append('audio', file)\n\n        return await fetch(url, {\n            method: method.toUpperCase(),\n            headers: {\n                'Accept': 'application/json',\n                //'Content-Type': 'application/json',\n                'Authorization': apiKey.key,\n            },\n            body,\n        });\n    }\n\n    private async method<O>(method: Method, endpoint: string, args?: any, update = true) {\n        const apiKey = this.getApiKey();\n        if (!apiKey) throw new Error('Not logged in');\n\n        let url = endpoint;\n        if (!url.startsWith(API_URL)) url = `${API_URL}/${url}`\n        if (method !== 'get') url += '/';\n\n        const response = await fetch(url, {\n            method: method.toUpperCase(),\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': apiKey.key,\n            },\n            body: args ? JSON.stringify(args) : undefined,\n        });\n\n        if (update && method !== 'get') this.update();\n\n        if (response.status === 200)\n            return response.json() as Promise<Response<O>>;\n        else\n            throw new Error('Not logged in');\n\n    }\n\n    async post<O = string>(url: string, args: any = {}, update = true) {\n        return this.method<O>('post', url, args, update);\n    }\n\n    async put<O = string>(url: string, args: any = {}, update = true) {\n        return this.method<O>('put', url, args, update);\n    }\n\n    async delete<O = string>(url: string, args: any = {}, update = true) {\n        return this.method<O>('delete', url, args, update);\n    }\n\n    async logout() {\n        const apiKey = this.getApiKey();\n\n        console.log('Logout');\n\n        /*\n                if (apiKey) await this.delete(`apikey/${apiKey.id}`)\n                    .catch(e => console.error(e))\n        */\n\n        localStorage.removeItem('apikey');\n        window.location.reload();\n    }\n\n    async login(base64: string) {\n\n        const url = `${API_URL}/apikey/`;\n\n        const { platform, vendor } = navigator;\n        const date = format(new Date());\n\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json',\n                'Authorization': `Basic ${base64}`,\n            },\n            body: JSON.stringify({ purpose: `${vendor} ${platform}, ${date}` }),\n        });\n\n        this.update();\n\n        if (response.status !== 201) throw new Error('Invalid credentials');\n\n        const key = await response.json()\n        localStorage.setItem('apikey', JSON.stringify(key));\n\n        window.location.reload();\n\n    }\n\n}\n\n\n\nconst API = new Api();\n\nexport default API;","module.exports = __webpack_public_path__ + \"static/media/test.5aa714da.mp3\";","module.exports = __webpack_public_path__ + \"static/media/example-cover.b2e600a7.jpg\";","import { faBomb, faCheck, faExclamationTriangle, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport React, { Dispatch, SetStateAction, useContext, useEffect } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport { setInterval } from 'timers';\n\ninterface MessageProps {\n    type: 'info' | 'success' | 'error' | 'warning';\n    text: string;\n}\n\nexport type IMessage = MessageProps & { date: Date };\n\nconst Messages = () => {\n    const [messages] = useContext(MessageContext);\n    const { add, close } = useMessages();\n\n    return (\n        <TransitionGroup className='messages'>\n            {messages.slice(0, 4).map((message, i) =>\n                <CSSTransition key={+message.date} timeout={400}>\n                    <Message close={() => close(i)} {...message} />\n                </CSSTransition>\n            )}\n        </TransitionGroup>\n    )\n}\n\nconst Message = ({ text, type, close }: MessageProps & { close: () => void }) => {\n\n    const icon = (() => {\n        switch (type) {\n            case 'error': return faBomb;\n            case 'info': return faInfoCircle;\n            case 'success': return faCheck;\n            case 'warning': return faExclamationTriangle;\n        }\n    })();\n\n    return (\n        <div className={`message ${type}`} onClick={close}>\n            <span>{text}</span>\n            <Icon {...{ icon }} />\n        </div>\n    )\n}\n\nconst MessageContext = React.createContext<[\n    IMessage[],\n    Dispatch<SetStateAction<IMessage[]>>,\n]>([[], () => { }]);\n\nexport const useMessages = () => {\n    const [messages, setMessages] = useContext(MessageContext);\n\n    useEffect(() => {\n        const i = setInterval(() => {\n            if (messages.length > 0) {\n                const now = new Date().getTime();\n                setMessages(m => m.filter(({ date }) => now - date.getTime() < 4000))\n            }\n        }, 1000);\n        return () => clearTimeout(i);\n    }, [])\n\n    const add = (m: MessageProps) => setMessages(old => [...old.slice(-4), { ...m, date: new Date() }]);\n    const clear = () => setMessages([]);\n    const close = (index: number) => setMessages(old => {\n        const n = [...old];\n        n.splice(index, 1);\n        return n;\n    })\n\n    return { add, clear, close };\n}\n\nexport const Provider = MessageContext.Provider;\n\nexport default Messages;","import { faPause, faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon as Icon } from \"@fortawesome/react-fontawesome\";\nimport classes from 'classnames';\nimport React, { createContext, Dispatch, SetStateAction, useContext, useEffect, useMemo, useState } from \"react\";\nimport { useMessages } from \"../components/Message\";\nimport Api from \"./Api\";\nimport { ISong } from \"./Models\";\n\nexport interface IQueue {\n    songs: ISong[];\n    add: (s: ISong) => void;\n    remove: (i: number) => void;\n}\n\ninterface PlayerData {\n    song?: ISong;\n    play: (song?: ISong | ISong[], songs?: ISong[]) => void;\n    pause: () => void;\n    next?: () => void,\n    previous?: () => void,\n    position: number;\n    shuffle: boolean;\n    repeat: boolean;\n    setShuffle: Dispatch<SetStateAction<boolean>>;\n    setRepeat: Dispatch<SetStateAction<boolean>>;\n    playing: () => boolean;\n    queue?: IQueue;\n    songs: ISong[];\n}\n\nconst Context = createContext<PlayerData & { audio: HTMLAudioElement } | null>(null);\n\nexport const Provider = Context.Provider;\n\nexport const usePlayer: () => PlayerData = () => {\n    const context = useContext(Context);\n    if (!context) throw new Error('There is no player defined');\n    return context;\n}\n\n/**\n * Can be used anywhere to access and modify volume\n * TODO This is where the actual volume logic will happen\n */\nexport const useVolume = () => {\n    const context = useContext(Context);\n    if (!context) throw new Error('There is no player defined');\n    const { audio } = context;\n\n    const [volume, set] = useState(0.4);\n    const [saveVolumed, saveVolume] = useState(volume);\n\n    const setVolume = (v: number) => {\n        const clamped = Math.min(1, Math.max(0, v));\n        set(clamped);\n        audio.volume = clamped;\n    }\n\n    useEffect(() => {\n        const update = () => set(v => {\n            if (audio.volume !== v) return audio.volume;\n            return v;\n        });\n        audio.addEventListener('volumechange', update);\n        return () => audio.removeEventListener('volumechange', update);\n    }, [audio]);\n\n    useEffect(() => {\n        audio.volume = volume;\n    }, [volume, audio]);\n\n    const toggleVolume = () => {\n        if (volume > 0) {\n            saveVolume(volume);\n            setVolume(0);\n        } else {\n            setVolume(saveVolumed);\n        }\n    }\n\n    return { volume, setVolume, toggleVolume };\n}\n\nexport const useQueue = (setSong: Dispatch<SetStateAction<ISong | undefined>>) => {\n    const [songs, setSongs] = useState<ISong[]>([]);\n    const messages = useMessages();\n\n    const add = (s: ISong) => {\n        setSongs(old => [...old, s]);\n        messages.add({ text: `Added ${s.title} to the queue`, type: 'success' });\n    }\n\n    const remove = (index: number) => {\n        setSongs(old => {\n            const n = [...old]\n            n.splice(index, 1);\n            return n;\n        })\n    }\n\n    return { songs, add, remove } as IQueue;\n}\n\nexport const useCreateAudio = () => {\n    const [song, setSong] = useState<ISong>();\n    const [shuffle, setShuffle] = useState(false);\n    const [repeat, setRepeat] = useState(true);\n    const [position, setPosition] = useState(0);\n\n    const [unshuffled, setSongs] = useState<ISong[]>([]);\n    const shuffled = useMemo(() => [...unshuffled].sort(() => Math.random() - 0.5), [unshuffled]);\n    const songs = shuffle ? shuffled : unshuffled;\n    const [index, setIndex] = useState(0);\n\n    const audio = useMemo(() => {\n        const a = new Audio()\n        a.crossOrigin = 'anonymous';\n        return a;\n    }, []);\n    const queue = useQueue(setSong) as IQueue | undefined;\n\n    useEffect(() => {\n        const update = () => setPosition(audio.currentTime);\n        audio.addEventListener('timeupdate', update);\n        return () => audio.removeEventListener('timeupdate', update);\n    }, [audio])\n\n    const play = async (song?: ISong | ISong[], songs?: ISong[]) => {\n        const ss = Array.isArray(song) ? song : songs;\n        const s1 = Array.isArray(song) ? undefined : song;\n        const s = s1 ?? (ss ? ss[0] : undefined);\n\n        if (ss && s) {\n            setIndex(ss.indexOf(s));\n        }\n\n        setSongs([...(ss ?? [])]);\n\n        if (s?.audio) await Api.audio(s.audio)\n            .then(src => {\n                setSong(s);\n\n                audio.src = src;\n                audio.currentTime = 0;\n                audio.play();\n\n            }).catch(e => {\n                setSong(undefined);\n                console.error(e)\n            });\n\n        else await audio?.play();\n    }\n\n    const pause = () => {\n        audio?.pause();\n    }\n\n    const previous = undefined;\n\n    const next = (() => {\n        if (queue?.songs[0]) return () => {\n            play(queue.songs[0]);\n            queue.remove(0);\n        }\n        else {\n            const i = index + 1;\n            if (songs.length > 0 && (i < songs.length || repeat)) return () => {\n                play(songs[i % songs.length]);\n            };\n        }\n    })();\n\n    return {\n        song: song ? { ...song, length: audio.duration } : undefined,\n        play, pause, next, previous,\n        shuffle, repeat, setShuffle, setRepeat,\n        playing: () => !!audio && !audio.paused,\n        position,\n        queue,\n        audio,\n        songs: songs.slice(index + 1, index + 11),\n    };\n}\n\nexport const SongButton = ({ song, songs }: { song: ISong, songs?: ISong[] }) => {\n    const { play, pause, playing, song: s } = usePlayer();\n    const selected = song.id === s?.id;\n    const disabled = !song.audio;\n\n    const onClick = () => {\n        if (selected) {\n            if (playing()) pause();\n            else play();\n        } else play(song, songs);\n    }\n\n    return (\n        <button className={classes('song-button', { disabled })} {...{ onClick }}>\n            <Icon icon={(selected && playing()) ? faPause : faPlay} />\n        </button>\n    );\n}\n\nexport default usePlayer;","import { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport querystring, { ParsedUrlQueryInput } from 'querystring';\nimport React, { SyntheticEvent, useEffect, useMemo, useState } from 'react';\nimport API from './Api';\nimport { IList, IModel } from './Models';\n\n/**\n * React hook to subscibe to a specific api endpoint\n * @param endpoint The url\n * @param params Optional query parameters\n */\nexport function useApi<R>(endpoint: string, params?: ParsedUrlQueryInput) {\n    const [result, setResult] = useState<undefined | R>();\n    const [loading, setLoading] = useState(true);\n    const [message, setMessage] = useState<string | undefined>();\n\n    const query = querystring.encode(params);\n    useEffect(() => {\n        setLoading(true);\n        setResult(undefined);\n\n        return API.subscribe<R>(endpoint, query).then((r, e) => {\n            setResult(r);\n            setMessage(e?.message);\n            setLoading(false);\n        })\n    }, [query, endpoint]);\n\n    return [result, loading, message] as [R | undefined, boolean, string | undefined];\n}\n\nexport function useApiBunch<R>(endpoints: string[]) {\n    const [results, setResults] = useState<R[]>([]);\n    const [loading, setLoading] = useState(true);\n    const [messages, setMessages] = useState<string[]>([]);\n\n    useEffect(() => {\n        if (results.length === endpoints.length) setLoading(false);\n    }, [results, endpoints])\n\n    useEffect(() => {\n        setLoading(true);\n        setResults([]);\n\n        Promise.all(endpoints.map((endpoint, i) => API.fetch<R>(endpoint)\n            .catch(e => setMessages(m => [...m, e]))\n        )).then(results => setResults(results.filter(r => typeof r === 'object') as R[]));\n\n    }, [endpoints]);\n\n    return [results, loading, messages] as [R[], boolean, string[]];\n}\n\nexport function useApiList<M extends IModel>(endpoint: string, params?: ParsedUrlQueryInput) {\n    const [models, loading, message] = useApi<IList<M>>(endpoint, params);\n\n    const sorted = useMemo(() => (models?.objects ?? [])\n        .sort((a, b) => a.id - b.id), [models]);\n\n    return [sorted, loading, message] as [M[] | undefined, boolean, string | undefined];\n}\n\nexport function useLoadingList<M extends IModel>(endpoint: string, params: ParsedUrlQueryInput | Render<M[]>, render?: Render<M[]>): JSX.Element | null {\n    const p = typeof params === 'object' ? params : undefined;\n    const r = typeof params === 'function' ? params : render;\n    const [result, loading, error] = useApiList<M>(endpoint, p);\n\n    if (loading) return <Loading />\n    if (!result) return <span className='empty-info'>{error || 'Not found'}</span>\n    return r ? r(result) : null;\n}\n\n/**\n * React hook to send post requests\n * @param endpoint The url\n * @param data Optional body data\n * @param cb Optional callback function called on success with the response\n */\nexport function useSubmit<R = any>(endpoint: string, data?: any, cb?: (r?: R) => unknown) {\n    const [error, setError] = useState<any>();\n    const [inProgress, setLoading] = useState(false);\n\n    const post = (e?: SyntheticEvent) => {\n        e?.preventDefault();\n        setLoading(true);\n        API.post<R>(endpoint, data)\n            .then(r => {\n                if (cb) cb(r);\n                return undefined;\n            })\n            .catch(e => e as Error)\n            .then(e => {\n                setError(e);\n                setLoading(false);\n            });\n    }\n\n    const message = error?.message;\n    return { message, error, valid: !message, post, inProgress };\n}\n\n/**\n * A universal loading component\n */\nexport const Loading = () => {\n    return <Icon className='loading inline' icon={faSpinner} />\n}\n\nexport type Render<R> = (result: R) => JSX.Element | null;\n\n/**\n * React hook to render loading componets universally\n * @param endpoint The api url\n * @param params Optional query parameters\n * @param render The render function called once the data has been received\n */\nexport function useLoading<R>(endpoint: string, params: ParsedUrlQueryInput | Render<R>, render?: Render<R>): JSX.Element | null {\n    const p = typeof params === 'object' ? params : undefined;\n    const r = typeof params === 'function' ? params : render;\n    const [result, loading, error] = useApi<R>(endpoint, p);\n\n    if (loading) return <Loading />\n    if (!result) return <span className='empty-info'>{error || 'Not found'}</span>\n    return r ? r(result) : null;\n}","import React, { ReactNode, HTMLAttributes } from 'react';\n\nconst Cell = (props: { area: string, children?: ReactNode } & HTMLAttributes<HTMLDivElement>) => {\n    const { children, className, area, style, ...other } = props;\n    return (\n        <div className={`${className ?? ''} ${area}`} style={{ gridArea: area, position: 'relative', ...style }} {...other}>\n            {children}\n        </div>\n    );\n}\n\nexport default Cell;","import React, { useContext, useEffect, useRef } from 'react';\n\nexport interface DialogProps {\n    text: string;\n    buttons: {\n        text: string;\n        className?: string;\n        click?: () => unknown\n    }[];\n}\n\nexport const GenericDialog = ({ dialog }: { dialog: DialogProps }) => {\n    const { close } = useDialog();\n\n    return (\n        <div className='generic'>\n            <p>{dialog.text}</p>\n            <ul>\n                {dialog.buttons.map(({ text, className, click }, i) =>\n                    <button key={i} onClick={() => {\n                        if (click) click();\n                        close();\n                    }} {...{ className }}>\n                        {text}\n                    </button>\n                )}\n            </ul>\n        </div>\n    )\n}\n\nconst Dialog = () => {\n    const [children] = useContext(DialogContext);\n    const { close } = useDialog();\n    const ref = useRef(null);\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.keyCode === 27) close();\n        }\n        window.addEventListener('keydown', listener);\n        return () => window.removeEventListener('keydown', listener);\n    })\n\n    return (\n        <>\n            {children && <div onClick={close} className='curtain' />}\n            {/*<CSSTransition in={!!children} key='dialog' timeout={200} {...{ ref }}>*/}\n            {children &&\n                <div className='dialog enter-done' {...{ ref }}>\n                    {children}\n                </div>\n            }\n            {/*</CSSTransition>*/}\n        </>\n    )\n}\n\nconst DialogContext = React.createContext<[\n    JSX.Element | null,\n    (d: JSX.Element | null) => void\n]>([null, () => { }]);\n\nexport const useDialog = () => {\n    const [, open] = useContext(DialogContext);\n    const close = () => open(null);\n    return { open, close };\n}\n\nexport const Provider = DialogContext.Provider;\n\nexport default Dialog;","import { faCompactDisc, faDrum, faGuitar, faHeadphones, faMusic, faPlus, faRecordVinyl } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport classes from 'classnames';\nimport React, { CSSProperties, useMemo, useState } from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { Render, useLoading, useLoadingList } from '../api/Hooks';\nimport { IModel } from '../api/Models';\nimport Cell from './Cell';\nimport { useDialog } from './Dialog';\n\nconst ICONS = [faHeadphones, faMusic, faGuitar, faDrum, faRecordVinyl, faCompactDisc];\n\nexport const Cover = (props: { alt: string, src?: string } & CSSProperties) => {\n    const { src, alt, ...rest } = props;\n    const [hasImage, setImage] = useState(false);\n\n    const icon = useMemo(() => ICONS[Math.floor(Math.random() * ICONS.length)], [])\n\n    return <Cell area='cover' style={{ ...rest }}>\n        <img\n            onLoad={() => setImage(true)}\n            onError={() => setImage(false)}\n            draggable={false}\n            {... { alt, src }}\n        />\n        {!hasImage && <Icon icon={icon} />}\n    </Cell>\n}\n\nexport function ModelView<M extends IModel>(props: { endpoint: string, render: Render<M>, create?: () => JSX.Element }) {\n    const { endpoint, create } = props;\n    const { id } = useParams();\n\n    return (\n        <>\n            <ModelSidebar {...{ endpoint, create }} />\n            <Cell area='active'>\n                {id\n                    ? <Single {...{ id }} {...props} />\n                    : <h1>Select a{endpoint.match(/^[aeiou]/i) ? 'n' : ''} {endpoint}</h1>\n                }\n            </Cell>\n        </>\n    )\n}\n\nfunction Single<M extends IModel>(props: { endpoint: string, id: string, render: Render<M> }) {\n    const { id, endpoint, render } = props;\n    return useLoading<M>(`${endpoint}/${id}`, m =>\n        <>\n            <h1>{m.name}</h1>\n            {render(m)}\n        </>\n    );\n}\n\nexport function ModelSidebar<M extends IModel>({ endpoint, create }: { endpoint: string, create?: () => JSX.Element }) {\n    const { id: active } = useParams();\n    const { open } = useDialog();\n\n    return useLoadingList<M>(endpoint, models =>\n        <Cell area='list'>\n            {create && <button onClick={() => open(create())}>\n                <Icon icon={faPlus} />\n            </button>}\n            <ul className='list'>\n                {(models.length > 0)\n                    ? models.map(({ name, id }) =>\n                        <Link key={id} to={`/${endpoint}s/${id}`}>\n                            <li className={classes({ active: id.toString() === active })}>\n                                {name}\n                            </li>\n                        </Link>\n                    )\n                    : <li className='empty-info'>No {endpoint}s yet</li>\n                }\n            </ul>\n        </Cell>\n    );\n}","import React from 'react';\nimport Cell from './Cell';\nimport { IAlbum, ISong } from '../api/Models';\nimport { useApi } from '../api/Hooks';\nimport { NO_COVER } from './App'\nimport usePlayer from '../api/Audio';\nimport { Cover } from './Shared';\n\nconst ActiveSong = () => {\n    const { song } = usePlayer();\n    return song\n        ? <ActiveCover {...song} />\n        : <Cover alt='No song playing' />;\n}\n\nconst ActiveCover = (song: ISong) => {\n    const [album] = useApi<IAlbum>(song.album);\n\n    return (\n        <Cover\n            src={album?.cover_url}\n            alt='Active Song Cover'\n        />\n    )\n}\n\nexport default ActiveSong;","import { faUpload, faCheck, faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport classes from 'classnames';\nimport React, { Dispatch, SetStateAction, useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useApi, useLoading, useApiList, Loading } from '../api/Hooks';\nimport { IAlbum, IList, IModel, ISong } from '../api/Models';\nimport Cell from './Cell';\nimport API from '../api/Api';\nimport { useDialog } from './Dialog';\n\nconst fileName = (f: File) => f.name.substring(0, f.name.lastIndexOf('.'));\n\nconst Upload = React.memo(() => {\n    const [files, setFiles] = useState<File[]>([]);\n    const [uploading, setUploading] = useState<File[]>([]);\n\n    const upload = () => {\n        setUploading(u => [...files, ...u])\n        setFiles([]);\n    }\n\n    return (\n        <>\n            <form onSubmit={e => {\n                e.preventDefault();\n                upload();\n            }}>\n\n                <label role=\"button\" className=\"file\" htmlFor=\"file\">\n                    <span>Choose Files</span>\n                    <Icon icon={faUpload} />\n                </label>\n\n                <input onChange={e => setFiles([...(e.target.files ?? []) as File[]])} multiple id=\"file\" type=\"file\" accept=\"audio/mp3\" hidden />\n\n                <button className={classes({ disabled: files.length === 0 })} type=\"submit\">\n                    Upload {files.length ? `${files.length} Song` : ''}\n                </button>\n\n            </form>\n\n            <ul className='uploading'>\n                {uploading.map(f => <Uploading key={f.name} file={f} />)}\n            </ul>\n        </>\n    )\n});\n\nconst Uploading = ({ file }: { file: File }) => {\n    const [done, setDone] = useState(false);\n    const name = fileName(file);\n\n    useEffect(() => {\n        setDone(false);\n        API.upload('song', file)\n            .catch(e => console.error(e))\n            .then(() => setDone(true))\n    }, [file]);\n\n    return (\n        <li className={classes({ done })}>\n            {done\n                ? <Icon icon={faCheck} />\n                : <Loading />\n            }\n            <span>{name}</span>\n        </li>\n    );\n}\n\ntype State<T> = [T, Dispatch<SetStateAction<T>>];\n\nexport function ModelSelect<T extends IModel>(props: { endpoint: string, state: State<string | null>, name?: string, highlight?: (t: T) => boolean }) {\n    const { endpoint, state, name, highlight } = props;\n    const [initial, onChange] = state;\n\n    const [models] = useApiList<T>(endpoint);\n\n    const sorted = useMemo(() => {\n        if (!highlight || !models) return models ?? [];\n        return [...models].sort((a, b) => {\n            const [ia, ib] = [a, b].map(highlight).map(b => b ? -1 : 1);\n            return ia - ib;\n        });\n    }, [highlight, models]);\n\n    const set = (v: string) => {\n        const v2 = v.length > 0 ? v : null;\n        onChange(v2);\n    }\n\n    return (\n        <select value={initial ?? ''} id={name ?? endpoint} name={name ?? endpoint} onChange={e => set(e.target.value)}>\n            {sorted.length > 0 &&\n                <>\n                    <option value=''>Select an {endpoint}</option>\n                    {sorted.map(m =>\n                        <option\n                            className={classes({ highlight: highlight && highlight(m) })}\n                            key={m.id}\n                            value={m.resource_uri}>\n                            {m.name}\n                        </option>\n                    )}\n                </>\n            }\n        </select>\n    )\n}\n\nexport const MultiModelSelect = (props: { endpoint: string, state: State<string[]> }) => {\n    const { endpoint, state } = props;\n    const [initial, onChange] = state;\n    const [models, set] = useState<(null | string)[]>(initial.length > 0 ? initial : [null]);\n\n    useEffect(() => {\n        onChange(models.filter(m => !!m) as string[]);\n    }, [models]);\n\n    return <div className='multi-select'>\n        {models.map((model, i) =>\n            <ModelSelect name={`${endpoint}[]`} key={i} {...{ endpoint }} state={[\n                model, action => {\n                    const n = [...models];\n                    const a = typeof action === 'function' ? action(model) : action;\n\n                    if (a || i === 0) n[i] = a;\n                    else n.splice(i, 1);\n\n                    set(n);\n                }\n            ]} />\n        )}\n        {models[models.length - 1] && <button onClick={() => set([...models, null])}>Add</button>}\n    </div>;\n}\n\nexport const SongEditor = () => {\n    const { id } = useParams();\n    return useLoading<ISong>(`song/${id}`, s => <LoadedSongEditor song={s} />)\n}\n\nexport const LoadedSongEditor = ({ song }: { song?: ISong }) => {\n    const { close } = useDialog();\n\n    const [title, setTitle] = useState<string>(song?.title ?? '');\n    const [album, setAlbum] = useState<null | string>(song?.album ?? null);\n    const [artists, setArtists] = useState<string[]>(song?.artists ?? []);\n\n    const highlight = useMemo(() => (album: IAlbum) =>\n        artists.every(a => album.artists.includes(a)), [artists]\n    );\n\n    const data = { artists, album, title };\n\n    return (\n        <form className='editor' onSubmit={e => {\n            e.preventDefault();\n            close();\n            if (song) API.put(`song/${song.id}`, data)\n                .catch(e => console.error(e))\n        }}>\n\n            <Cell area='title'>\n                <label htmlFor='title'>Title</label>\n                <input className='big' id='title' type='text' placeholder='Title' value={title} onChange={e => setTitle(e.target.value)} />\n            </Cell>\n\n            <Cell area='artists'>\n                <label>Artists</label>\n                <MultiModelSelect endpoint='artist' state={[artists, setArtists]} />\n            </Cell>\n\n            <Cell area='album'>\n                <label htmlFor='album'>Album</label>\n                <ModelSelect endpoint='album' state={[album, setAlbum]} {...{ highlight }} />\n            </Cell>\n\n            <input type='submit' className='primary' value='Save' />\n\n        </form>\n    )\n}\n\nexport default Upload;\n\n","import { faEdit, faList, faPlus, IconDefinition } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport classes from 'classnames';\nimport React, { useEffect, useMemo, useState, memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport API from '../api/Api';\nimport usePlayer, { SongButton } from '../api/Audio';\nimport { Loading, useApi, useLoading, useApiList } from '../api/Hooks';\nimport { IAlbum, IArtist, IList, IModel, IPlaylist, ISong } from '../api/Models';\nimport { useDialog } from './Dialog';\nimport { LoadedSongEditor } from './Upload';\n\ninterface ISelection<T> {\n    isSelected(id: number): boolean;\n    selected: () => T[];\n    events(id: number): {\n        onMouseDown(e: React.MouseEvent): void;\n        onMouseUp(e: React.MouseEvent): void;\n        onMouseMove(e: React.MouseEvent): void;\n    }\n}\n\nexport function useSelection<T extends IModel>(models: T[], multi = true): ISelection<T> {\n    const [selected, setSelected] = useState<number[]>([]);\n    const [saved, setSaved] = useState<number[]>([]);\n    const [last, setLast] = useState<number>();\n\n    const ids = useMemo(() => models.map(m => m.id), [models]);\n\n    useEffect(() => {\n        const listener = (e: KeyboardEvent) => {\n            if (e.ctrlKey && e.keyCode === 65) {\n                e.preventDefault();\n                setSelected([...ids]);\n                setSaved([...ids]);\n            }\n        }\n        window.addEventListener('keydown', listener);\n        return () => window.removeEventListener('keydown', listener);;\n    })\n\n    const isSelected = (m: T | number) => {\n        const id = typeof m === 'number' ? m : m.id;\n        return selected.includes(id);\n    }\n\n    const events = (id: number) => {\n        const index = ids.indexOf(id);\n        const is = isSelected(id);\n\n        return {\n            onMouseDown: (e: React.MouseEvent) => {\n                const preserve = (e.shiftKey || e.ctrlKey) && multi;\n                const n = preserve ? saved : [];\n\n                if (is && e.ctrlKey && multi) {\n                    n.splice(index, 1);\n                } else {\n                    n.push(id);\n                }\n\n                if (!e.shiftKey) {\n                    setLast(index);\n                    setSaved(n);\n                }\n\n                setSelected(n);\n            },\n            onMouseUp: (e: React.MouseEvent) => {\n                const shift = e.shiftKey;\n\n                if (multi && shift && last !== undefined) setSelected(old => {\n                    const n = [...old];\n\n                    const lower = Math.min(last, index);\n                    const upper = Math.max(last, index);\n                    for (let i = lower; i <= upper; i++) n.push(ids[i]);\n\n                    return n;\n                })\n            },\n            onMouseMove: (e: React.MouseEvent) => {\n                if (e.buttons) {\n                    const n = [...saved];\n                    if (last !== undefined) {\n                        const lower = Math.min(last, index);\n                        const upper = Math.max(last, index);\n                        for (let i = lower; i <= upper; i++) n.push(ids[i]);\n                    }\n                    setSelected(n);\n                }\n            }\n        }\n    };\n\n    return { selected: () => models.filter(m => isSelected(m.id)), isSelected, events };\n}\n\nexport interface SongAction {\n    icon: IconDefinition;\n    display: string | ((i: number) => string);\n    action: (songs: ISong[]) => void;\n}\n\nconst SongAdder = ({ songs }: { songs: ISong[] }) => {\n    const { close } = useDialog();\n\n    const [playlists] = useApiList<IPlaylist>('playlist');\n\n    const { isSelected, events, ...selection } = useSelection<IPlaylist>(playlists ?? [], false);\n    const [selected]: (IPlaylist | undefined)[] = selection.selected();\n\n    const submit = () => {\n        Promise.all(songs.filter(s => isSelected(s.id)).map(song =>\n            API.post('songinplaylist', { song: song.resource_uri, playlist: selected.resource_uri }, false)\n                .catch(e => console.error(e))\n        )).then(() => API.update());\n        close();\n    }\n\n    if (!playlists) return <Loading />\n\n    return (\n        <div className='add-songs demarg'>\n            <button className={classes('primary', { disabled: !selected })} onClick={submit}>\n                Add {songs.length} to playlist\n            </button>\n            <ul>\n                {playlists.map(({ name, id }) =>\n                    <li key={id} className={classes({ selected: isSelected(id) })} {...events(id)}>{name}</li>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nconst Songs = memo(({ songs, ...props }: { songs: ISong[], actions?: SongAction[] }) => {\n    const selection = useSelection(songs);\n    const { open } = useDialog();\n\n    const actions = useMemo(() => [...props.actions ?? [], {\n        icon: faPlus,\n        display: i => `Add ${i} song${i === 1 ? '' : 's'} to playlist`,\n        action: songs => open(<SongAdder {...{ songs }} />)\n    }], [props.actions]);\n    \n    if ((songs?.length ?? 0) === 0) return <p style={{ gridArea: 'songs' }} className='empty-info'>No songs yet</p>\n\n    const selected = selection.selected();\n\n    return (\n        <div className='songlist'>\n            <div className='actions'>\n                {(selected.length > 0) ? actions.map(({ icon, display, action }, i) => {\n                    const text = typeof display === 'string' ? display : display(selected.length);\n\n                    return (\n                        <button key={i} className={classes({ disabled: selected.length === 0 })} onClick={() => action(selected)}>\n                            <Icon {...{ icon }} />\n                            <span>{text}</span>\n                        </button>\n                    )\n\n                }) : <p className='empty-info'>No songs selected</p>}\n            </div>\n            <div className='table'>\n                <div>\n                    <p />\n                    <p>Title</p>\n                    <p>Artists</p>\n                    <p>Album</p>\n                    <p>Length</p>\n                    <p />\n                    <p />\n                </div>\n                {songs.map(song =>\n                    <SongRow\n                        {...{ selection }}\n                        key={song.id} {...{ song, songs }}\n                    />\n                )}\n            </div>\n        </div>\n    )\n});\n\nconst SongRow = (props: { song: ISong | string, selection?: ISelection<ISong>, songs?: ISong[] }) => {\n    const { song, selection, songs } = props;\n    const { open } = useDialog();\n    const { queue } = usePlayer();\n\n    if (typeof song === 'string') return <LoadingSongRow url={song} {...{ selection }} />\n\n    const { album, artists, title, length, id } = song;\n    const selected = selection?.isSelected(id) ?? false;\n\n    return (\n        <div className={classes({ selected })} {...selection?.events(id)}>\n            <SongButton {...{ song, songs }} />\n\n            <p>{title}</p>\n            <p>{artists.map(a =>\n                <Artist key={a} url={a} />\n            )}</p>\n            <p><Album url={album} /></p>\n            <p>{length}</p>\n\n            <IconButton icon={faEdit} onClick={() => open(<LoadedSongEditor {...{ song }} />)} />\n            <IconButton icon={faList} onClick={() => queue?.add(song)} />\n\n        </div>\n    );\n}\n\nconst IconButton = ({ onClick, icon }: { onClick?: () => void, icon: IconDefinition }) => {\n\n    return <button {...{ onClick }}>\n        <Icon {...{ icon }} />\n    </button>\n}\n\nconst LoadingSongRow = ({ url, ...rest }: { url: string, selection?: ISelection<ISong> }) => {\n    return useLoading<ISong>(url, song => <SongRow {...rest} {...{ song }} />);\n}\n\nconst Artist = ({ url }: { url: string }) => {\n    const [a] = useApi<IArtist>(url);\n    return a ? <Link className='seperate-comma' to={`/artists/${a.id}`}>{a.name}</Link> : null;\n}\n\nconst Album = ({ url }: { url: string }) => {\n    const [a] = useApi<IAlbum>(url);\n    return a ? <Link className='seperate-comma' to={`/albums/${a.id}`}>{a.name}</Link> : null;\n}\n\nexport default Songs;","import React, { useMemo, useEffect } from 'react';\nimport { IAlbum, IArtist, ISong } from '../api/Models';\nimport { ModelView, Cover } from './Shared';\nimport SongList from './SongList';\nimport Cell from './Cell';\nimport { useLoading, useApiBunch } from '../api/Hooks';\nimport { Link } from 'react-router-dom';\n\nconst Active = ({ name, artists, songs: songURLs, cover_url }: IAlbum) => {\n    const [songs] = useApiBunch<ISong>(songURLs);\n\n    return (\n        <>\n            <Cover src={cover_url} alt={name} />\n            <Cell area='artists'>\n                {artists.map(a => <Artist key={a} url={a} />)}\n            </Cell>\n            <SongList {...{ songs }} />\n        </>\n    )\n}\n\nconst Artist = ({ url }: { url: string }) => {\n    return useLoading<IArtist>(url, ({ name, id }) =>\n        <Link to={`/artists/${id}`}>{name}</Link>\n    );\n}\n\nconst Albums = React.memo(() => {\n    return <ModelView endpoint='album' render={(a: IAlbum) => <Active {...a} />} />\n});\n\nexport default Albums;","import React, { memo } from 'react';\nimport { useParams, Link } from 'react-router-dom';\nimport { Loading, useApi, useLoading } from '../api/Hooks';\nimport { IAlbum, IArtist, IList, ISong } from '../api/Models';\nimport Cell from './Cell';\nimport { Cover, ModelView } from './Shared';\n\nconst Artists = React.memo(() => {\n    return <ModelView endpoint='artist' render={(a: IArtist) => <Artist {...a} />} />;\n});\n\nconst Artist = ({ albums }: IArtist) => {\n    return (\n        <>\n            <Cell area='albums'>\n                {albums.length > 0\n                    ? albums.map(a => <Album key={a} url={a} />)\n                    : <p className='empty-info'>No albums yet</p>\n                }\n            </Cell>\n        </>\n    );\n};\n\nconst Album = ({ url }: { url: string }) => {\n    return useLoading<IAlbum>(url, ({ cover_url, name, release, songs, id }) => (\n        <Link to={`/albums/${id}`}>\n            <h5>{name} - (Genre {release})</h5>\n            <Cover\n                src={cover_url}\n                alt='Cover'\n            />\n            <table>\n                <tbody>\n                    {(songs.length > 0)\n                        ? songs.map(t => <SongRow key={t} url={t} />)\n                        : <tr><td className='empty-info'>No songs yet</td></tr>\n                    }\n                </tbody>\n            </table>\n        </Link>\n    ));\n}\n\nconst SongRow = ({ url }: { url: string }) => {\n    const [song] = useApi<ISong>(url);\n\n    return (\n        <tr>\n            {song\n                ? <>\n                    <td>{song.name}</td>\n                    <td>{song.length}</td>\n                </>\n                : <td rowSpan={2}><Loading /></td>\n            }\n        </tr>\n    );\n}\n\nexport default Artists;","import { faCompactDisc, faList, faMusic, faUser, faSeedling, faDoorOpen, faUpload } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport classes from 'classnames';\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst Nav = () => {\n    const path = useLocation().pathname;\n\n    const links = [\n        { href: '/songs', text: 'Songs', icon: faMusic },\n        { href: '/playlists', text: 'Playlists', icon: faList },\n        { href: '/albums', text: 'Albums', icon: faCompactDisc },\n        { href: '/artists', text: 'Artists', icon: faUser },\n        { href: '/upload', text: 'Upload', icon: faUpload },\n        { href: '/logout', text: 'Logout', icon: faDoorOpen },\n    ];\n\n    return (\n        <nav>\n            <ul>\n                {links.map(({ text, href, icon }) =>\n                    <Link key={href} to={href}>\n                        <li className={classes({ active: path === href })}>\n                            <span>{text}</span>\n                            <Icon {...{ icon }} />\n                        </li>\n                    </Link>\n                )}\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;\n","import React, { createContext, Dispatch, SetStateAction, useContext, useState, useEffect } from 'react';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport { faSun, faMoon, faExclamation, IconDefinition, faFire } from '@fortawesome/free-solid-svg-icons';\n\nexport interface ISettings {\n    theme: string;\n}\n\nexport const DEFAULT_SETTINGS = { theme: 'dark' }\n\nconst SettingsContext = createContext<[ISettings, Dispatch<SetStateAction<ISettings>>]>(\n    [DEFAULT_SETTINGS, () => { }]\n);\n\nconst Settings = () => {\n    const [{ theme }, setSettings] = useContext(SettingsContext);\n\n    const themes: [string, IconDefinition][] = [\n        ['dark', faMoon],\n        ['light', faSun],\n        ['red', faFire],\n    ];\n\n    return <div className='settings'>\n\n        <h1>Settings</h1>\n\n        <ul>\n            {themes.map(([theme, icon]) =>\n                <button key={theme} className='icon-button' onClick={() => setSettings(s => ({ ...s, theme }))}>\n                    <Icon {...{ icon }} />\n                </button>\n            )}\n        </ul>\n    </div>\n}\n\nexport function useSettings() {\n    const saved = localStorage.getItem('settings')\n    const defaultSettings = saved ? JSON.parse(saved) : DEFAULT_SETTINGS;\n\n    const [settings, setSettings] = useState<ISettings>(defaultSettings)\n\n    useEffect(() => {\n        localStorage.setItem('settings', JSON.stringify(settings));\n    }, [settings])\n\n    return [settings, setSettings] as [ISettings, Dispatch<SetStateAction<ISettings>>];\n}\n\nexport const Provider = SettingsContext.Provider;\n\nexport default Settings;","import React, { useState, MouseEvent } from 'react';\nimport Cell from './Cell';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { faPlay, faStepForward, faStepBackward, faRandom, faVolumeDown, faVolumeUp, faVolumeMute, faRedoAlt, faPause, faList, faCog } from '@fortawesome/free-solid-svg-icons'\nimport { IArtist, ISong } from '../api/Models';\nimport { useApi } from '../api/Hooks';\nimport usePlayer, { IQueue, useVolume } from '../api/Audio';\nimport { useDialog } from './Dialog';\nimport classes from 'classnames';\nimport { setPriority } from 'os';\nimport Settings from './Settings';\n\nconst IconButton = (props: { icon: IconDefinition, area?: string, onClick?: () => unknown, disabled?: boolean, active?: boolean }) => {\n    const { area, icon, disabled, onClick, active } = props;\n    return (\n        <Cell className={classes('icon-button', { disabled: disabled || !onClick, active })} area={area ?? ''} {...{ onClick }}>\n            <Icon {...{ icon }} />\n        </Cell >\n    )\n}\n\nconst Player = () => {\n    const { song, position, play, pause, playing, songs, queue, previous, next, shuffle, setShuffle, repeat, setRepeat } = usePlayer();\n    const { open } = useDialog();\n\n    return (\n        <Cell area='player'>\n            {song && <SongInfo {...song} {...{ position }} />}\n\n            <IconButton onClick={previous} icon={faStepBackward} area='previous' />\n            <IconButton onClick={next} icon={faStepForward} area='next' />\n            <IconButton onClick={playing() ? pause : () => play()} icon={playing() ? faPause : faPlay} area='play' />\n            <IconButton active={shuffle} onClick={() => setShuffle(b => !b)} icon={faRandom} area='shuffle' />\n            <IconButton active={repeat} onClick={() => setRepeat(b => !b)} icon={faRedoAlt} area='repeat' />\n            <IconButton disabled={songs.length + (queue?.songs.length ?? 0) === 0} icon={faList} area='queue' onClick={() => open(<Queue />)} />\n            <IconButton icon={faCog} area='settings' onClick={() => open(<Settings />)} />\n\n            <Volume />\n        </Cell>\n    );\n}\n\nconst Queue = () => {\n    const { songs, queue } = usePlayer();\n\n    const sources = [\n        ['Queue', queue?.songs ?? []],\n        ['Next', songs],\n    ].filter(([, s]) => s.length > 0) as [string, ISong[]][];\n\n    return (\n        <div className='queue demarg'>\n            {sources.map(([source, songs]) =>\n                <React.Fragment key={source}>\n                    <p>{source}</p>\n                    <ul key={source}>\n                        {songs.map(({ title, id }, i) =>\n                            <li key={`${id}-${i}`}>{title}</li>\n                        )}\n                    </ul>\n                </React.Fragment>\n            )}\n        </div>\n    );\n}\n\nconst timestamp = (time: number) => {\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n    return `${minutes}:${seconds.toFixed(0).padStart(2, '0')}`;\n}\n\nconst SongInfo = (song: ISong & { position: number }) => {\n    const { title, artists, length, position } = song;\n\n    return (\n        <Cell area='info'>\n            <h4>{title}</h4>\n            <p>{artists?.map(a => <Artist key={a} url={a} />)}</p>\n            <div className='song-progress'>\n                <span>{timestamp(position)}</span>\n                <span>-{timestamp(length - position)}</span>\n                <div style={{ width: `${position / length * 100}%` }} />\n            </div>\n        </Cell>\n    );\n}\n\nconst Artist = ({ url }: { url: string }) => {\n    const [a] = useApi<IArtist>(url);\n    return a ? <span>{a.name}</span> : null;\n}\n\nconst Volume = () => {\n    const { volume, setVolume, toggleVolume } = useVolume();\n\n    const icon = volume === 0\n        ? faVolumeMute\n        : volume < 0.5\n            ? faVolumeDown\n            : faVolumeUp\n\n    const adjust = (e: MouseEvent<HTMLDivElement>) => {\n        const w = e.currentTarget.offsetWidth;\n        const l = e.currentTarget.getBoundingClientRect().left;\n        const x = e.clientX - l;\n        const v = x / w;\n        setVolume(v);\n    }\n\n    return (\n        <Cell area='volume'>\n            <IconButton {...{ icon }} onClick={toggleVolume} />\n            <div className='bar' onClick={adjust} onMouseMove={e => {\n                if (e.buttons > 0) adjust(e);\n            }}>\n                <div style={{ width: `${volume * 100}%` }} />\n            </div>\n        </Cell>\n    );\n}\n\nexport default Player;","import React, { useMemo, useState } from 'react';\nimport { IPlaylist, ISong, IList } from '../api/Models';\nimport { ModelView } from './Shared';\nimport SongList, { useSelection } from './SongList';\nimport { useApiBunch, useLoading, useApi, Loading, useApiList } from '../api/Hooks';\nimport { faTrash, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport { useDialog } from './Dialog';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport classes from 'classnames';\nimport API from '../api/Api';\n\nconst SongAdder = ({ songsinplaylist, resource_uri }: IPlaylist) => {\n    const contained = (s: ISong) => songsinplaylist.includes(s.resource_uri);\n    const { close } = useDialog();\n\n    const [all, loading] = useApiList<ISong>('song');\n    const songs = useMemo(() => all?.filter(s => !contained(s)) ?? [], [all]);\n\n    const { isSelected, events, selected } = useSelection<ISong>(songs);\n\n    const submit = () => {\n        const newSongs = selected().map(s => s.resource_uri);\n        API.put(resource_uri, {\n            songsinplaylist: [...songsinplaylist, ...newSongs]\n        }).catch(e => console.error(e));\n        close();\n    }\n\n    if (loading) return <Loading />\n\n    return (\n        <div className='add-songs demarg'>\n            <button className='primary' onClick={submit}>Add selected to playlist</button>\n            <ul>\n                {songs.map(({ title, id }) =>\n                    <li key={id} className={classes({ selected: isSelected(id) })} {...events(id)}>{title}</li>\n                )}\n            </ul>\n        </div>\n    );\n}\n\nconst Active = (playlist: IPlaylist) => {\n    const { songsinplaylist: songURLs } = playlist;\n    const [songs] = useApiBunch<ISong>(songURLs);\n    const { open } = useDialog();\n\n    const remove = (songs: ISong[]) => {\n\n    }\n\n    return <>\n        <button onClick={() => open(<SongAdder {...playlist} />)}>\n            <Icon icon={faPlus} />\n        </button>\n\n        <SongList {...{ songs }} actions={[{\n            icon: faTrash,\n            display: i => `Remove ${i} song${i === 1 ? '' : 's'}`,\n            action: remove,\n        }]} />\n    </>\n}\n\nconst Create = () => {\n    const [name, setName] = useState('');\n    const { close } = useDialog();\n\n    const submit = (e: React.FormEvent) => {\n        e.preventDefault();\n        close();\n        API.post('playlist', { name })\n            .catch(e => console.error(e));\n    }\n\n    return <form className='create-playlist' onSubmit={submit}>\n\n        <input className='big' value={name} onChange={e => setName(e.target.value)} type='text' placeholder='Name' />\n        <button className='primary' type='submit'>Create</button>\n\n    </form>\n}\n\nconst Playlists = React.memo(() => {\n    return <ModelView\n        endpoint='playlist'\n        render={(p: IPlaylist) => <Active {...p} />}\n        create={() => <Create />}\n    />\n})\n\nexport default Playlists;","import classes from 'classnames';\nimport React from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport { useLoadingList } from '../api/Hooks';\nimport { IList, IPlaylist } from '../api/Models';\nimport Cell from './Cell';\n\nconst Playlist = () => {\n    const { id: active } = useParams();\n\n    return useLoadingList<IPlaylist>('playlist', playlists =>\n        <Cell area='playlists'>\n            {(playlists.length > 0)\n                ? <ul className='list'>\n                    {playlists.map(({ id, name }) =>\n                        <Link key={id} to={`/playlists/${id}`}>\n                            <li className={classes({ active: id.toString() === active })}>\n                                {name}\n                            </li>\n                        </Link>\n                    )}\n                </ul>\n                : <p className='empty-info'>No playlists yet</p>\n            }\n        </Cell>\n    );\n}\n\nexport default Playlist;\n\n","import Api from './Api';\nimport { IList, IModel, IArtist, IAlbum, ISong } from './Models';\nimport { Dispatch, SetStateAction } from 'react';\n\nconst songNames = [\n    \"Daunting Moons\",\n    \"The Inside-Out Matter\",\n    \"No One Works At Anger\",\n    \"It Uses They\",\n    \"Pawns At the Spring\",\n    \"The Bowl Find\",\n    \"Obstructing History\",\n    \"Sing Doors\",\n    \"Feverish Thorns\",\n    \"Listen\",\n    \"Thoughts\",\n    \"From The Phantom Penguins\",\n    \"Rule Dos On a Prisoner\",\n    \"Visions In Cadenza\",\n    \"The Ambitious Sweet Child\",\n    \"The Love of Journal\",\n    \"The Magic's Act\",\n    \"Mercy Buy School\",\n    \"Gamble Broadcasting\",\n    \"On They Savior\",\n    \"Dreaming Universes\",\n    \"Missing\",\n    \"Bound Cigars\",\n    \"The Smooth Stream\",\n    \"I Sends Through Expression\",\n    \"No One Finishs Everybody\",\n    \"Something Without the Swords\",\n    \"The Harmony Imagine\",\n    \"Typing Activity\",\n    \"Try Right Now\",\n    \"Bare Machinations\",\n    \"Have\",\n    \"Moment\",\n    \"Of The Venturesome Bond\",\n    \"Photography Cans From a Building\",\n    \"Power From Serenade\",\n    \"The Cool Yearning\",\n    \"The Places of Sweet Child\",\n    \"The Souls's Children\",\n    \"Earaches Listen Crafter\",\n    \"Healing Kneeling\",\n    \"From He Person\",\n    \"Drooling Lines\",\n    \"Undoubted\",\n    \"Bad Outlaws\",\n    \"The Which Island\",\n    \"It Stands Under Expectations\",\n    \"I Puts Its\",\n    \"Date Under the Forever\",\n    \"The Death Give\",\n    \"Slaughtering Matter\",\n    \"Lose War\",\n    \"Solitary Body\",\n    \"Drink\",\n    \"Touch\",\n    \"Like The Same Fair\",\n    \"Building Feels Under a Rose\",\n    \"Flames Of Official\",\n    \"The Abandoned Disk\",\n    \"The Height of Silk\",\n    \"The Anything's Terror\",\n    \"Hope Understand Muse\",\n    \"Village Sailing\",\n    \"Through We Woman\",\n    \"Pleading Names\",\n    \"Hungry\"\n];\n\nconst artistNames = [\n    'Talking Heads',\n    'Carl Perkins',\n    'Curtis Mayfield',\n    'R.E.M.',\n    'Diana Ross and the Supremes',\n    'Lynyrd Skynyrd',\n    'Nine Inch Nails',\n    'Booker T. and the MGs',\n    'Guns n’ Roses',\n    'Tom Petty',\n    'Carlos Santana',\n    'The Yardbirds',\n    'Jay-Z',\n    'Gram Parsons',\n    'Tupac Shakur',\n    'Black Sabbath',\n    'James Taylor',\n    'Eminem',\n    'Creedence Clearwater Revival',\n    'The Drifters',\n    'Elvis Costello',\n    'The Four Tops',\n    'The Stooges',\n    'Beastie Boys',\n    'The Shirelles',\n    'Eagles',\n    'Hank Williams',\n    'Radiohead',\n    'AC/DC',\n    'Frank Zappa',\n    'The Police',\n    'Jackie Wilson',\n    'The Temptations',\n    'Cream',\n    'Al Green',\n    'The Kinks',\n    'Phil Spector',\n    'Tina Turner',\n    'Joni Mitchell',\n    'Metallica',\n    'The Sex Pistols',\n    'Aerosmith',\n    'Parliament and Funkadelic',\n    'Grateful Dead',\n    'Dr. Dre',\n    'Eric Clapton',\n    'Howlin’ Wolf',\n    'The Allman Brothers Band',\n    'Queen',\n    'Pink Floyd'\n]\n\nfunction range<T>(array: T[], i: number) {\n    return array.sort((a, b) => Math.random() - 0.5).slice(0, Math.min(array.length, i));\n}\n\nfunction random<T>(array: T[]) {\n    return range(array, 1)[0];\n}\n\nconst randomDate = () => {\n    return `${1960 + Math.floor(Math.random() * 60)}`;\n}\n\nexport interface ITracker {\n    setTotal: Dispatch<SetStateAction<number>>,\n    setProgress: Dispatch<SetStateAction<number>>,\n    setMessage?: Dispatch<SetStateAction<string | null>>,\n}\n\nclass Seeder {\n\n    tags(count: number) {\n        return []\n    }\n\n    artists(count: number) {\n        return range(artistNames, count).map(name => ({ name, type: 'P' }));\n    }\n\n    albums(artists: IArtist[]) {\n        const artistIds = artists.map(a => a.resource_uri);\n        return (count: number) => range(songNames, count).map(name => ({\n            name,\n            artists: range(artistIds, 2),\n            release: randomDate(),\n        }));\n    }\n\n    songs(albums: IAlbum[]) {\n        return (count: number) => range(songNames, count).map(title => {\n            const { artists, resource_uri } = random(albums);\n            return {\n                title,\n                artists,\n                album: resource_uri,\n                length: Math.floor(Math.random() * 100 + 100),\n            };\n        })\n    }\n\n    playlists(count: number) {\n        return new Array(count).fill(null).map((_, i) => ({\n            name: 'Playlist ' + i,\n        }));\n    }\n\n    private wait(millis: number) {\n        return new Promise(res => setTimeout(res, millis));\n    }\n\n    private async seedModels<M extends IModel>(endpoint: string, count: number, generator: (i: number) => unknown[], tracker?: ITracker) {\n\n        tracker?.setMessage?.call(null, `Fetching ${endpoint}s`)\n        tracker?.setProgress(0);\n\n        const old = await Api.fetch<IList<IModel>>(endpoint);\n        tracker?.setTotal(old.objects.length + count);\n\n        tracker?.setMessage?.call(null, `Deleting ${endpoint}s`)\n        await Promise.all(old.objects.map(m =>\n            Api.delete(m.resource_uri, {}, false)\n                .catch(e => console.error(e))\n                .then(() => tracker?.setProgress(i => i + 1))\n        ));\n\n        tracker?.setMessage?.call(null, `Seeding ${endpoint}s`)\n        await Promise.all(generator(count).map(m =>\n            Api.post(endpoint, m, false)\n                .catch(e => console.error(e))\n                .then(() => tracker?.setProgress(i => i + 1))\n        ));\n\n        const { objects } = await Api.fetch<IList<M>>(endpoint);\n        return objects;\n    }\n\n    async uploadFile(songs: ISong[], tracker?: ITracker) {\n        tracker?.setTotal(songs.length);\n        tracker?.setProgress(0);\n        tracker?.setMessage?.call(null, 'Uploading Songs');\n        \n        songs.map(() => {\n\n            const audio = require('../test.mp3');\n            console.log(audio);\n\n            tracker?.setProgress(i => i + 1);\n        });\n    }\n\n    async seed(tracker?: ITracker) {\n\n        const artists = await this.seedModels<IArtist>('artist', 20, this.artists, tracker);\n        const albums = await this.seedModels<IAlbum>('album', 20, this.albums(artists), tracker);\n        const songs = await this.seedModels<ISong>('song', 70, this.songs(albums), tracker);\n        await this.uploadFile(songs, tracker);\n\n\n        tracker?.setMessage?.call(null, 'Done');\n        this.wait(200);\n        tracker?.setTotal(0);\n        tracker?.setMessage?.call(null, null);\n\n        Api.update();\n\n    }\n\n}\n\nconst SEEDER = new Seeder();\n\nexport default SEEDER;","import React, { useState } from 'react';\nimport SEEDER from \"../api/Seeder\";\nimport classes from 'classnames';\nimport { useApi, Loading } from '../api/Hooks';\nimport { IList } from '../api/Models';\n\ninterface IEndpoints {\n    [key: string]: {\n        list_endpoint: string,\n        schema: string\n    }\n}\n\nconst ignore = [\n    'songinplaylist',\n    'track',\n    'apikey',\n]\n\nconst Endpoint = ({ endpoint }: { endpoint: string }) => {\n    const [models] = useApi<IList<unknown>>(endpoint);\n    const count = models?.objects?.length;\n\n    if(models && count === undefined) return null;\n\n    return (\n        <div>\n            <p>{endpoint}</p>\n            <p>\n                {models\n                    ? `${count} model${count === 1 ? '' : 's'}`\n                    : <Loading />\n                }\n            </p>\n        </div>\n    )\n}\n\nconst Seeder = React.memo(() => {\n    const [progress, setProgress] = useState(0);\n    const [total, setTotal] = useState(0);\n    const [message, setMessage] = useState<string | null>(null);\n    const loading = (total > 0);\n\n    const [endpoints] = useApi<IEndpoints>('');\n\n    const seed = () => SEEDER.seed({ setProgress, setTotal, setMessage }).catch(e => console.error(e))\n\n    return (\n        <>\n            <div className='endpoints'>\n                {endpoints && Object.keys(endpoints).filter(e => !ignore.includes(e.toLowerCase())).map(e =>\n                    <Endpoint key={e} endpoint={e} />\n                )}\n            </div>\n\n            <button className={classes({ disabled: loading })} onClick={seed}>\n                <p>{loading ? 'Seeding...' : 'Seed!'}</p>\n            </button>\n\n            {loading &&\n                <>\n                    <div className='progress'>\n                        <div style={{ width: `${progress / total * 100}%` }} />\n                        <p>{progress} / {total}</p>\n                    </div>\n                    <p>{message}</p>\n                </>\n            }\n        </>\n    );\n});\n\nexport default Seeder;","import React, { memo } from 'react';\nimport { useLoadingList } from '../api/Hooks';\nimport { IList, ISong } from '../api/Models';\nimport SongList from './SongList';\n\nconst Songs = memo(() => {\n    return useLoadingList<ISong>('song', songs =>\n        <SongList {...{ songs }} />\n    )\n});\n\nexport default Songs;","import classes from 'classnames';\nimport React, { MemoExoticComponent, ReactNode, useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport Api from '../api/Api';\nimport { Provider as AudioProvider, useCreateAudio } from '../api/Audio';\nimport { Loading } from '../api/Hooks';\nimport '../style/general.scss';\nimport ActiveSong from './ActiveSong';\nimport Albums from './Albums';\nimport Artists from './Artists';\nimport Cell from './Cell';\nimport Dialog, { Provider as DialogProvider } from './Dialog';\nimport Login from './Login';\nimport Messages, { IMessage, Provider as MessageProvider } from './Message';\nimport Nav from './NavBar';\nimport Player from './Player';\nimport Playlists from './Playlists';\nimport PlaylistsBar from './PlaylistsBar';\nimport Seeder from './Seeder';\nimport { Provider as SettingsProvider, useSettings } from './Settings';\nimport Songs from './Songs';\nimport Upload from './Upload';\n\nexport const NO_COVER = require('../img/example-cover.jpg');\n\nconst SinglePage = ({ children }: { children: ReactNode }) => {\n\treturn <section className='single'>{children}</section>;\n}\n\nconst Logout = () => {\n\tuseEffect(() => {\n\t\tApi.logout();\n\t});\n\treturn <Redirect to='' />\n}\n\nconst App = () => {\n\tconst [loggedIn, setLoggedIn] = useState<boolean | null>(null);\n\n\tuseEffect(() => {\n\t\tApi.isLoggedIn().then(b => setLoggedIn(b));\n\t}, []);\n\n\tconst dialog = useState<JSX.Element | null>(null);\n\tconst audio = useCreateAudio();\n\tconst messages = useState<IMessage[]>([]);\n\n\tconst [settings, setSettings] = useSettings();\n\tconst { theme } = settings;\n\n\tconst pages: IPage[] = [\n\t\t{ path: '/playlists/:id?', component: Playlists },\n\t\t{ path: '/artists/:id?', component: Artists },\n\t\t{ path: '/albums/:id?', component: Albums },\n\t\t{ path: '/songs', component: Songs },\n\t\t{ path: '/seed', component: Seeder },\n\t\t{ path: '/upload', component: Upload },\n\t];\n\n\treturn (\n\t\t<SettingsProvider value={[settings, setSettings]}>\n\t\t\t<DialogProvider value={dialog}>\n\t\t\t\t<AudioProvider value={audio}>\n\t\t\t\t\t<MessageProvider value={messages}>\n\t\t\t\t\t\t<Router>\n\t\t\t\t\t\t\t<section className={classes(theme)}>\n\t\t\t\t\t\t\t\t{loggedIn\n\t\t\t\t\t\t\t\t\t? <section className='container'>\n\t\t\t\t\t\t\t\t\t\t<Nav />\n\t\t\t\t\t\t\t\t\t\t<Player />\n\t\t\t\t\t\t\t\t\t\t<ActiveSong />\n\t\t\t\t\t\t\t\t\t\t<PlaylistsBar />\n\n\t\t\t\t\t\t\t\t\t\t<Dialog />\n\t\t\t\t\t\t\t\t\t\t<Messages />\n\n\t\t\t\t\t\t\t\t\t\t<Switch>\n\n\t\t\t\t\t\t\t\t\t\t\t{pages.map(page =>\n\t\t\t\t\t\t\t\t\t\t\t\t<Route key={page.path} path={page.path}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Page {...page} />\n\t\t\t\t\t\t\t\t\t\t\t\t</Route >\n\t\t\t\t\t\t\t\t\t\t\t)}\n\n\t\t\t\t\t\t\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t\t\t\t\t\t\t<Redirect to='/playlists' />\n\t\t\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t\t\t<Route path='/logout'>\n\t\t\t\t\t\t\t\t\t\t\t\t<Logout />\n\t\t\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t\t\t<Route>\n\t\t\t\t\t\t\t\t\t\t\t\t<Cell area='page'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<h1 className='empty-info'>404 - Not Found</h1>\n\t\t\t\t\t\t\t\t\t\t\t\t</Cell>\n\t\t\t\t\t\t\t\t\t\t\t</Route>\n\n\t\t\t\t\t\t\t\t\t\t</Switch>\n\t\t\t\t\t\t\t\t\t</section>\n\n\t\t\t\t\t\t\t\t\t: <SinglePage>\n\t\t\t\t\t\t\t\t\t\t{loggedIn === false\n\t\t\t\t\t\t\t\t\t\t\t? <Login />\n\t\t\t\t\t\t\t\t\t\t\t: <Loading />\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t</SinglePage>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</Router>\n\n\t\t\t\t\t</MessageProvider>\n\t\t\t\t</AudioProvider>\n\t\t\t</DialogProvider>\n\t\t</SettingsProvider>\n\t);\n}\n\nexport interface IPage {\n\tpath: string;\n\tcomponent: (() => JSX.Element | null) | MemoExoticComponent<() => JSX.Element | null>;\n\tid?: string;\n\ttext?: string;\n}\n\nconst Page = (page: IPage) => {\n\n\tconst path = useLocation().pathname.slice(1) + '/';\n\tconst id = page.id ?? path.slice(0, path.indexOf('/'));\n\n\tuseEffect(() => {\n\t\tdocument.title = 'OSS - ' + id.charAt(0).toUpperCase() + id.slice(1).toLowerCase();\n\t}, [id]);\n\n\treturn (\n\t\t<Cell area='page' id={id}>\n\t\t\t<page.component />\n\t\t</Cell>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport const register = (config?: Config) => {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nconst registerValidSW = (swUrl: string, config?: Config) => {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nconst checkValidServiceWorker = (swUrl: string, config?: Config) => {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport const unregister = () => {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}