{"version":3,"sources":["img/example-cover.jpg","components/Cell.tsx","components/ActiveSong.tsx","api/FakeApi.ts","api/Hooks.tsx","components/Artists.tsx","components/NavBar.tsx","components/Player.tsx","components/PlaylistsBar.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Cell","props","children","className","area","other","style","gridArea","position","ActiveSong","track","src","album","cover_url","alt","API","fakes","Map","endpoint","models","this","fake","forEach","m","id","data","set","url","params","then","cb","match","get","undefined","Error","args","console","log","random","array","Math","floor","length","range","i","sort","a","b","slice","min","tags","artists","name","type","map","albums","release","artist","require","tracks","title","playlists","Array","fill","fakeModels","useApi","useState","result","setResult","loading","setLoading","query","querystring","encode","useEffect","subscribe","r","Artists","handleClick","Container","ListGroup","Item","onClick","Media","width","height","Row","Nav","path","useLocation","pathname","href","text","key","classes","active","to","IconButton","icon","rest","timestamp","time","minutes","seconds","toString","padStart","TrackInfo","join","Volume","volume","setVolume","saveVolumed","saveVolume","toggleVolume","useVolume","faVolumeMute","faVolumeDown","faVolumeUp","adjust","e","buttons","w","currentTarget","offsetWidth","l","getBoundingClientRect","left","x","clientX","v","round","onMouseMove","Player","faStepBackward","faStepForward","faPlay","faRandom","Playlist","Jumbotron","fluid","list","variant","action","App","activeTrack","PlaylistsBar","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cf74fa88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/example-cover.b2e600a7.jpg\";","import React, { ReactNode, HTMLAttributes } from 'react';\n\nfunction Cell(props: { area: string, children?: ReactNode } & HTMLAttributes<HTMLDivElement>) {\n    const { children, className, area, ...other } = props;\n    return (\n        <div className={`${className ?? ''} ${area}`} style={{ gridArea: area, position: 'relative' }} {...other}>\n            {children}\n        </div>\n    );\n}\n\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\nimport { IActiveTrack } from '../api/Models';\n\nfunction ActiveSong({ track }: { track: IActiveTrack }) {\n    return (\n        <Cell area='cover'>\n            <img\n                src={track.album.cover_url}\n                alt='Active Song Cover'\n            />\n        </Cell>\n    )\n}\n\nexport default ActiveSong;","import { IApi } from \"./Api\";\nimport { IModel, ITrack, IActiveTrack, IArtist, IAlbum, ITag, IPlaylist } from \"./Models\";\nimport { ParsedUrlQueryInput } from \"querystring\";\n\nclass FakeApi implements IApi {\n\n    private fakes = new Map<string, () => any>();\n\n    public fakeModels<O extends IModel>(endpoint: string, models: O[]) {\n        this.fake<O[]>(endpoint, () => models);\n        models.forEach(m => this.fake(`${endpoint}/${m.id}`, () => m));\n    }\n\n    public fake<O = IModel>(endpoint: string, data: () => O) {\n        this.fakes.set(endpoint, data);\n    }\n\n    public subscribe<O>(url: string, params?: ParsedUrlQueryInput) {\n\n        return {\n            then: (cb: (result: O | undefined, error?: Error) => unknown) => {\n\n                const endpoint = url.match(/\\??([a-zA-Z_-]+)\\/?/);\n\n                if (endpoint) {\n                    const fake = this.fakes.get(endpoint[1]);\n\n                    if (fake) cb(fake());\n                    else cb(undefined, new Error('Not Found'));\n\n                } else cb(undefined, new Error('Invalid Endpoint'));\n\n                return () => { };\n            }\n        }\n\n    }\n\n    public async post<O = string>(url: string, args: any) {\n\n        console.log(`Posted to '${url}' with params ${args}`)\n        return \"Posted\" as any;\n\n    }\n\n}\n\nconst API = new FakeApi();\n\nfunction random<T>(array: T[]) {\n    return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction range<T>(array: T[], i: number) {\n    return array.sort((a, b) => Math.random() - 0.5).slice(0, Math.min(array.length, i));\n}\n\nfunction randomDate() {\n    return `${1960 + Math.floor(Math.random() * 60)}`;\n}\n\nconst tags: ITag[] = []\n\nconst artists: IArtist[] = [\n    {\n        name: 'Dieter Bohlen',\n        tags: range(tags, 3),\n        type: 'P',\n    }\n].map((a, id) => ({ ...a, id } as IArtist));\n\nconst albums: IAlbum[] = [\n    {\n        name: 'Top 10 Nationalhymnen',\n        release: randomDate(),\n        artist: range(artists, 2),\n        cover_url: require('../img/example-cover.jpg'),\n        tags: range(tags, 3),\n    }\n].map((a, id) => ({ ...a, id }));\n\nconst tracks: ITrack[] = [\n    \"Daunting Moons\",\n    \"The Inside-Out Matter\",\n    \"No One Works At Anger\",\n    \"It Uses They\",\n    \"Pawns At the Spring\",\n    \"The Bowl Find\",\n    \"Obstructing History\",\n    \"Sing Doors\",\n    \"Feverish Thorns\",\n    \"Listen\",\n    \"Thoughts\",\n    \"From The Phantom Penguins\",\n    \"Rule Dos On a Prisoner\",\n    \"Visions In Cadenza\",\n    \"The Ambitious Sweet Child\",\n    \"The Love of Journal\",\n    \"The Magic's Act\",\n    \"Mercy Buy School\",\n    \"Gamble Broadcasting\",\n    \"On They Savior\",\n    \"Dreaming Universes\",\n    \"Missing\",\n    \"Bound Cigars\",\n    \"The Smooth Stream\",\n    \"I Sends Through Expression\",\n    \"No One Finishs Everybody\",\n    \"Something Without the Swords\",\n    \"The Harmony Imagine\",\n    \"Typing Activity\",\n    \"Try Right Now\",\n    \"Bare Machinations\",\n    \"Have\",\n    \"Moment\",\n    \"Of The Venturesome Bond\",\n    \"Photography Cans From a Building\",\n    \"Power From Serenade\",\n    \"The Cool Yearning\",\n    \"The Places of Sweet Child\",\n    \"The Souls's Children\",\n    \"Earaches Listen Crafter\",\n    \"Healing Kneeling\",\n    \"From He Person\",\n    \"Drooling Lines\",\n    \"Undoubted\",\n    \"Bad Outlaws\",\n    \"The Which Island\",\n    \"It Stands Under Expectations\",\n    \"I Puts Its\",\n    \"Date Under the Forever\",\n    \"The Death Give\",\n    \"Slaughtering Matter\",\n    \"Lose War\",\n    \"Solitary Body\",\n    \"Drink\",\n    \"Touch\",\n    \"Like The Same Fair\",\n    \"Building Feels Under a Rose\",\n    \"Flames Of Official\",\n    \"The Abandoned Disk\",\n    \"The Height of Silk\",\n    \"The Anything's Terror\",\n    \"Hope Understand Muse\",\n    \"Village Sailing\",\n    \"Through We Woman\",\n    \"Pleading Names\",\n    \"Hungry\"\n].map((title, id) => ({\n    id,\n    title,\n    artist: range(artists, Math.random() * 1 + 1),\n    album: random(albums),\n    length: Math.floor(Math.random() * 100 + 100),\n}));\n\nconst playlists: IPlaylist[] = new Array(6).fill(null).map(id => ({\n    id, name: 'A Playlist', tags: [], tracks: range(tracks, Math.random() * 5 + 6)\n}))\n\nAPI.fakeModels<ITrack>('track', tracks);\nAPI.fakeModels<IArtist>('artist', artists);\nAPI.fakeModels<IAlbum>('album', albums);\nAPI.fakeModels<ITag>('tag', tags);\nAPI.fakeModels<IPlaylist>('playlist', playlists);\n\nAPI.fake<IActiveTrack>('active-track', () => {\n    const track = random(tracks);\n    return { ...track, position: Math.floor(Math.random() * track.length) }\n});\n\n\nexport default API;","import querystring, { ParsedUrlQueryInput } from 'querystring';\nimport React, { SyntheticEvent, useEffect, useState } from 'react';\nimport API from './FakeApi';\n\n/**\n * React hook to subscibe to a specific api endpoint\n * @param endpoint The url\n * @param params Optional query parameters\n */\nexport function useApi<R>(endpoint: string, params?: ParsedUrlQueryInput) {\n    const [result, setResult] = useState<undefined | R>();\n    const [loading, setLoading] = useState(true);\n\n    const query = querystring.encode(params);\n    const url = `${endpoint}?${query}`;\n    useEffect(() => {\n        return API.subscribe<R>(url).then(r => {\n            setResult(r);\n            setLoading(false);\n        })\n    }, [url]);\n\n    return [result, loading] as [R | undefined, boolean];\n}\n\n/**\n * React hook to send post requests\n * @param endpoint The url\n * @param data Optional body data\n * @param cb Optional callback function called on success with the response\n */\nexport function useSubmit<R = any>(endpoint: string, data?: any, cb?: (r?: R) => unknown) {\n    const [error, setError] = useState<any>();\n    const [inProgress, setLoading] = useState(false);\n\n    const post = (e?: SyntheticEvent) => {\n        e?.preventDefault();\n        setLoading(true);\n        API.post<R>(endpoint, data)\n            .then(r => {\n                if (cb) cb(r);\n                return undefined;\n            })\n            .catch(e => e as Error)\n            .then(e => {\n                setError(e);\n                setLoading(false);\n            });\n    }\n\n    const message = error?.message;\n    return { message, error, valid: !message, post, inProgress };\n}\n\n/**\n * A universal loading component\n */\nexport function Loading() {\n    return <div className='loading' />;\n}\n\ntype Render<R> = (result: R) => JSX.Element | null;\n\n/**\n * React hook to render loading componets universally\n * @param enpoint The api url\n * @param params Optional query parameters\n * @param render The render function called once the data has been received\n */\nexport function useLoading<R>(enpoint: string, params: ParsedUrlQueryInput | Render<R>, render?: Render<R>): JSX.Element | null {\n    const p = typeof params === 'object' ? params : undefined;\n    const r = typeof params === 'function' ? params : render;\n    const [result, loading] = useApi<R>(enpoint, p);\n\n    if (loading) return <Loading />\n    if (!result) return <span>Not found</span>\n    return r ? r(result) : null;\n}","import React from 'react';\nimport '../style/general.scss';\nimport { Link, useLocation, useRouteMatch } from 'react-router-dom';\nimport classes from 'classnames';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport Media from 'react-bootstrap/Media';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport { linkSync } from 'fs';\nimport img from 'react-bootstrap/Image';\nimport Row from 'react-bootstrap/Row';\nimport { useApi } from '../api/Hooks';\nimport { IArtist, IAlbum } from '../api/Models';\n\nfunction Artists() {\n\n    const [artists] = useApi<IArtist[]>('artist');\n    const [albums] = useApi<IAlbum[]>('album');\n\n    if (!artists || !albums) return <p>Loading</p>;\n\n    function handleClick() {\n        console.log('funktioniert');\n    }\n\n    return (\n        <>\n            <Container className=\"ArtistsContainer\">\n                {artists.map(artist =>\n                    <ListGroup className=\"ListGroupArtists\">\n                        <ListGroup.Item onClick={handleClick}>{artist.name}</ListGroup.Item>\n                    </ListGroup>\n                )}\n            </Container>\n\n            <Container className=\"EachArtist\">\n                {artists.map(artist =>\n                    albums.map(album =>\n                        <ListGroup className=\"ListGroupForEachArtist\">\n                            <Media>\n                                <img\n                                    width={64}\n                                    height={64}\n                                    className=\"mr-3\"\n                                    src={album.cover_url}\n                                    alt=\"Cover\"\n                                />\n                            </Media>\n                            <p>{album.name}</p>\n                            {/* Genre not yet avaiable <p>{album.genre} - </p> */}\n                            <p>{album.release}</p>\n                            <Row>\n                                <ListGroup.Item onClick={handleClick}>{artist.name}</ListGroup.Item>\n                            </Row>\n                        </ListGroup>\n                    )\n                )}\n            </Container>\n        </>\n    );\n}\n\nexport default Artists;","import React from 'react';\nimport '../style/general.scss';\nimport { Link, useLocation, useRouteMatch } from 'react-router-dom';\nimport classes from 'classnames';\n\nfunction Nav() {\n    const path = useLocation().pathname;\n\n    const links = [\n        { href: '/playlists', text: 'Playlists' },\n        { href: '/albums', text: 'Albums' },\n        { href: '/artists', text: 'Artists' },\n    ]\n\n    return (\n        <nav>\n            <ul>\n                {links.map(({ text, href }) =>\n                    <li key={href} className={classes({ active: path === href })}>\n                        <Link to={href}>{text}</Link>\n                    </li>\n                )}\n            </ul>\n        </nav>\n    );\n}\n\nexport default Nav;\n","import React, { useState, MouseEvent } from 'react';\nimport Cell from './Cell';\nimport { FontAwesomeIcon as Icon } from '@fortawesome/react-fontawesome';\nimport { IconDefinition } from '@fortawesome/fontawesome-common-types';\nimport { faPlay, faStepForward, faStepBackward, faRandom, faVolumeDown, faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons'\nimport { IActiveTrack } from '../api/Models';\n\nfunction IconButton(props: { icon: IconDefinition, area?: string, onClick?: () => unknown }) {\n    const { area, icon, ...rest } = props;\n    return (\n        <Cell className='icon-button' area={area ?? ''} {...rest}>\n            <Icon {...{ icon }} />\n        </Cell >\n    )\n}\n\nfunction Player({ track }: { track?: IActiveTrack }) {\n    return (\n        <Cell area='player'>\n            {track && <TrackInfo {...track} />}\n\n            <IconButton icon={faStepBackward} area='previous' />\n            <IconButton icon={faStepForward} area='next' />\n            <IconButton icon={faPlay} area='play' />\n            <IconButton icon={faRandom} area='shuffle' />\n\n            <Volume />\n        </Cell>\n    );\n}\n\nfunction timestamp(time: number) {\n    const minutes = Math.floor(time / 60);\n    const seconds = time - minutes * 60;\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\n\nfunction TrackInfo(track: IActiveTrack) {\n    const { title: name, artist, length, position } = track;\n\n    return (\n        <Cell area='info'>\n            <h4>{name}</h4>\n            <p>{artist.map(a => a.name).join(' | ')}</p>\n            <div className='track-progress'>\n                <span>{timestamp(position)}</span>\n                <span>-{timestamp(length - position)}</span>\n                <div style={{ width: `${position / length * 100}%` }} />\n            </div>\n        </Cell>\n    );\n}\n\n/**\n * Can be used anywhere to access and modify volume\n * TODO This is where the actual volume logic will happen\n */\nexport function useVolume() {\n    const [volume, setVolume] = useState(40);\n    const [saveVolumed, saveVolume] = useState(volume);\n\n    const toggleVolume = () => {\n        if (volume > 0) {\n            saveVolume(volume);\n            setVolume(0);\n        } else {\n            setVolume(saveVolumed);\n        }\n    }\n\n    return { volume, setVolume, toggleVolume };\n}\n\nfunction Volume() {\n    const { volume, setVolume, toggleVolume } = useVolume();\n\n    const icon = volume === 0\n        ? faVolumeMute\n        : volume < 50\n            ? faVolumeDown\n            : faVolumeUp\n\n    const adjust = (e: MouseEvent<HTMLDivElement>) => {\n        console.log(e.buttons);\n        const w = e.currentTarget.offsetWidth;\n        const l = e.currentTarget.getBoundingClientRect().left;\n        const x = e.clientX - l;\n        const v = Math.round(x / w * 100)\n        setVolume(v);\n    }\n\n    return (\n        <Cell area='volume'>\n            <IconButton {...{ icon }} onClick={toggleVolume} />\n            <div className='bar' onClick={adjust} onMouseMove={e => {\n                if (e.buttons > 0) adjust(e);\n            }}>\n                <div style={{ width: `${volume}%` }} />\n            </div>\n        </Cell>\n    );\n}\n\nexport default Player;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { useLocation } from 'react-router-dom';\nimport '../style/general.scss';\nimport Cell from './Cell';\nimport { useApi } from '../api/Hooks';\nimport { IPlaylist } from '../api/Models';\n\n\nfunction Playlist() {\n\n    const [playlists] = useApi<IPlaylist[]>('playlist');\n    if (!playlists) return <p>Loading</p>\n\n    return (\n        <Cell area='playlists'>\n            <Jumbotron fluid className=\"Playlist\">\n                <Container>\n                    <ul>\n                        {playlists.map((list) =>\n                            <ListGroup className=\"ListGroup\" variant=\"flush\">\n                                <ListGroup.Item action href=\"info\">{list.name}</ListGroup.Item>\n                                {/*\n                                     <ListGroup.Item action variant = \"info\"></ListGroup.Item>\n                                    <ListGroup.Item action variant = \"info\">playlist2</ListGroup.Item> \n                                */}\n                            </ListGroup>\n                        )}\n                    </ul>\n                </Container>\n            </Jumbotron>\n        </Cell>\n    );\n}\n\nexport default Playlist;\n\n","import React from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport '../style/general.scss';\nimport ActiveSong from './ActiveSong';\nimport Artists from './Artists';\nimport Cell from './Cell';\nimport Nav from './NavBar';\nimport Player from './Player';\nimport PlaylistsBar from './PlaylistsBar';\nimport { useApi } from '../api/Hooks';\nimport { IActiveTrack } from '../api/Models';\n\nfunction App() {\n\n\tconst [activeTrack] = useApi<IActiveTrack>('active-track');\n\n\treturn (\n\t\t<Router>\n\t\t\t<Nav />\n\t\t\t<Player track={activeTrack} />\n\t\t\t{activeTrack && <ActiveSong track={activeTrack} />}\n\t\t\t<PlaylistsBar />\n\n\t\t\t<Switch>\n\n\t\t\t\t<Cell area='page'>\n\t\t\t\t\t<Route path='/playlists'>\n\t\t\t\t\t\t<h1>Playlists</h1>\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path='/albums'>\n\t\t\t\t\t\t<h1>Albums</h1>\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route path='/artists'>\n\t\t\t\t\t\t<Artists />\n\t\t\t\t\t</Route>\n\n\t\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t\t<Redirect to='/playlists' />\n\t\t\t\t\t</Route>\n\n\t\t\t\t</Cell>\n\n\t\t\t</Switch>\n\t\t</Router>\n\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}